{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Demo Website Stack",
  "Parameters": {
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VPC Id of target VPC"
    },
    "AppSubnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "List of subnet IDs to use for the DMZ / Front End tier"
    },
    "AppPort": {
      "Type": "Number",
      "Description": "The TCP service port where the Application listens",
      "Default": "80",
      "MinValue": "1",
      "MaxValue": "65535",
      "ConstraintDescription": "You must specify a valid TCP port between 1 and 65535"
    },
    "AppHealthCheck": {
      "Type": "String",
      "Description": "Type of instance health check, e.g. 'HTTP:80/' or 'TCP:80'",
      "Default": "HTTP:80/"
    },
    "AppImageId": {
      "Type": "AWS::EC2::Image::Id",
      "Description": "AMI Id to use for App instances"
    },
    "AppInstanceType": {
      "Type": "String",
      "Description": "ECS EC2 instance type",
      "Default": "t2.nano",
      "AllowedValues": [
          "t2.nano","t2.micro","t2.small","t2.medium","t2.large"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type (template restricts the allowed values)."
    },
    "AppAsgMinSize": {
      "Type": "Number",
      "Description": "The maximum size of the App autoscaling group",
      "Default": "3"
    },
    "AppAsgMaxSize": {
      "Type": "Number",
      "Description": "The maximum size of the App autoscaling group",
      "Default": "15"
    },
    "DnsZone": {
      "Type": "String",
      "Description": "DNS Zone for the Public resources",
      "AllowedPattern": "^(?:.*)\\.$",
      "ConstraintDescription": "The zone must end in a '.'"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances"
    },
    "SshInCidr": {
      "Type": "String",
      "Description": "Subnet CIDR whose members have SSH access to our instances, usually Bastion Host"
    }
  },
  "Resources": {
    "AppApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-app" ] ] }
      }
    },
    "CodeDeployRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "CodeDeployRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [ { "Ref": "CodeDeployRole" } ],
        "PolicyDocument": {
          "Statement": [
            {
              "Resource": [ "*" ],
              "Effect": "Allow",
              "Action": [
                "ec2:Describe*"
              ]
            },
            {
              "Resource": [ "*" ],
              "Effect": "Allow",
              "Action": [
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:PutLifecycleHook",
                "autoscaling:RecordLifecycleActionHeartbeat"
              ]
            },
            {
              "Resource": [ "*" ],
              "Effect": "Allow",
              "Action": [
                "Tag:getResources",
                "Tag:getTags",
                "Tag:getTagsForResource",
                "Tag:getTagsForResourceList"
              ]
            }
          ]
        },
        "PolicyName": "CodeDeployPolicy"
      }
    },

    "AppElbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Public ELB Security Group",
        "VpcId": { "Ref": "VpcId" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-app-elb" ] ] } } ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "AppElb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [ { "Ref": "AppElbSecurityGroup" } ],
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-app-elb" ] ] } } ],
        "Subnets": { "Ref": "AppSubnets" },
        "CrossZone": "true",
        "Listeners": [
          {
            "LoadBalancerPort": 80,
            "InstancePort": { "Ref": "AppPort" },
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": { "Ref": "AppHealthCheck" },
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "4",
          "Interval": "30",
          "Timeout": "2"
        }
      }
    },
    "AppElbHealthyCount": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alarm if number of healthy instances is less than the minimum ASG size",
        "MetricName": "HealthyHostCount",
        "Namespace": "AWS/ELB",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "3",
        "ComparisonOperator": "LessThanThreshold",
        "Threshold": { "Ref": "AppAsgMinSize" },
        "Dimensions": [ { "Name": "LoadBalancerName", "Value": { "Ref": "AppElb" } } ]
      }
    },
    "AppElbDns": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Comment": "CNAME for App ELB",
        "HostedZoneName": { "Ref": "DnsZone" },
        "Name": { "Fn::Join": [ ".", [
          { "Ref": "AWS::StackName" },
          { "Ref": "DnsZone" }
        ] ] },
        "Type": "A",
        "AliasTarget": {
          "HostedZoneId": { "Fn::GetAtt": [ "AppElb", "CanonicalHostedZoneNameID" ] },
          "DNSName": { "Fn::GetAtt": [ "AppElb", "DNSName" ] }
        }
      }
    },
    "AppSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "App Security Group",
        "VpcId": { "Ref": "VpcId" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-app-asg" ] ] } } ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": { "Ref": "AppPort" },
            "ToPort": { "Ref": "AppPort" },
            "SourceSecurityGroupId":  { "Ref": "AppElbSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": { "Ref": "SshInCidr" }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": -1,
            "ToPort": -1,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "AppInstanceLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Ref": "AppImageId" },
        "InstanceType": { "Ref": "AppInstanceType" },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "IamInstanceProfile": { "Ref": "AppInstanceProfile" },
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": [ { "Ref": "AppSecurityGroup" } ],
        "UserData": {
          "Fn::Base64": { "Fn::Join": ["", [
            "#!/bin/bash -x\n",

            "echo === System configuration ===\n",
            "echo 'export PS1=\"\\u@\\[\\e[1m\\]app\\[\\e[0m\\].", { "Ref": "AWS::StackName" }, " \\w \\\\$ \"' >> /etc/profile.d/aws.sh\n",

            "echo === Create /opt/aws/aws-parameters.sh ===\n",
            "mkdir /opt/aws\n",
            "cat > /opt/aws/aws-parameters.sh << __EOF__\n",
            "export _AWS_StackName=", { "Ref": "AWS::StackName" }, "\n",
            "export _AWS_Region=", { "Ref": "AWS::Region" }, "\n",
            "export _AWS_DnsZone=$(sed 's/\\.$//g' <<< ", { "Ref": "DnsZone" }, ")\n",
            "__EOF__\n",

            "echo === CodeDeploy agent install ===\n",
            "yum -y install ruby\n",
            "curl -L https://aws-codedeploy-", { "Ref": "AWS::Region" }, ".s3.amazonaws.com/latest/install -o /tmp/codedeploy-install\n",
            "chmod +x /tmp/codedeploy-install\n",
            "/tmp/codedeploy-install auto\n",

            "echo === Install Apache ===\n",
            "yum -y install httpd\n",
            "systemctl enable httpd.service\n",

            "echo === Done ===\n",
            "\n"
          ] ] }
        }
      }
    },
    "AppScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": { "Ref": "AppSubnets" },
        "LoadBalancerNames": [ { "Ref": "AppElb" } ],
        "LaunchConfigurationName": { "Ref": "AppInstanceLaunchConfig" },
        "TerminationPolicies": [ "OldestLaunchConfiguration", "OldestInstance" ],
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": 240,
        "Cooldown": 30,
        "MinSize": { "Ref": "AppAsgMinSize" },
        "MaxSize": { "Ref": "AppAsgMaxSize" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-app" ] ] }, "PropagateAtLaunch": "true" } ]
      }
    },
    "AppServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "AppScalingGroup" },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "AppServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "AppScalingGroup" },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "AppCpuAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 50% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "50",
        "AlarmActions": [ { "Ref": "AppServerScaleUpPolicy" } ],
        "Dimensions": [ { "Name": "AutoScalingGroupName", "Value": { "Ref": "AppScalingGroup" } } ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "AppCpuAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "AppServerScaleDownPolicy" } ],
        "Dimensions": [ { "Name": "AutoScalingGroupName", "Value": { "Ref": "AppScalingGroup" } } ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "AppInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "AppInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "AppInstanceRole"
          }
        ]
      }
    },
    "AppDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": { "Ref": "AppApplication" },
        "AutoScalingGroups": [ { "Ref": "AppScalingGroup" } ],
        "ServiceRoleArn": { "Fn::GetAtt" : [ "CodeDeployRole", "Arn" ] }
      }
    }

  },
  "Outputs": {
    "AppElbCanonicalName": {
      "Description": "App ELB canonical name",
      "Value": { "Fn::GetAtt": [ "AppElb", "DNSName" ] }
    },
    "AppElbDnsName": {
      "Description": "App ELB DNS Name (Public URL HostName)",
      "Value": { "Ref": "AppElbDns" }
    },
    "AppApplication": {
      "Description": "App CodeDeploy Application Name",
      "Value": { "Ref": "AppApplication" }
    },
    "AppDeploymentGroup": {
      "Description": "App CodeDeploy DeploymentGroup Name",
      "Value": { "Ref": "AppDeploymentGroup" }
    }
  }
}

